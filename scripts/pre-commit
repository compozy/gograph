#!/bin/bash

# Pre-commit hook for gograph project
# This script runs linting, formatting, and tests before allowing commits

set -e

echo "üîç Running pre-commit checks..."

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "‚ùå Not in a git repository"
    exit 1
fi

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check required tools
if ! command_exists go; then
    echo "‚ùå Go is not installed"
    exit 1
fi

if ! command_exists golangci-lint-v2; then
    echo "‚ö†Ô∏è  golangci-lint-v2 not found, installing..."
    go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.1.6
fi

# Get list of Go files that are staged
staged_go_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$' | grep -v vendor/ | grep -v .pb.go$ || true)

if [ -z "$staged_go_files" ]; then
    echo "‚úÖ No Go files staged for commit"
    exit 0
fi

echo "üìù Found staged Go files:"
echo "$staged_go_files"

# Run go mod tidy
echo "üßπ Running go mod tidy..."
if ! go mod tidy; then
    echo "‚ùå go mod tidy failed"
    exit 1
fi

# Check if go.mod or go.sum were modified
if ! git diff --exit-code go.mod go.sum > /dev/null 2>&1; then
    echo "üì¶ go.mod or go.sum were modified by go mod tidy"
    echo "Please stage these changes:"
    git diff go.mod go.sum
    echo ""
    echo "Run: git add go.mod go.sum"
    exit 1
fi

# Run gofmt
echo "üé® Running gofmt..."
unformatted_files=""
for file in $staged_go_files; do
    if [ -f "$file" ]; then
        if ! gofmt -l "$file" | grep -q .; then
            continue
        else
            unformatted_files="$unformatted_files $file"
        fi
    fi
done

if [ -n "$unformatted_files" ]; then
    echo "‚ùå The following files are not properly formatted:"
    echo "$unformatted_files"
    echo "Run: gofmt -s -w $unformatted_files"
    exit 1
fi

# Run golangci-lint on staged files
echo "üîç Running linter on staged files..."
if ! echo "$staged_go_files" | xargs golangci-lint-v2 run --allow-parallel-runners; then
    echo "‚ùå Linting failed"
    echo "Fix the linting errors before committing"
    exit 1
fi

# Run tests (quick check)
echo "üß™ Running quick tests..."
if ! go test -short ./...; then
    echo "‚ùå Tests failed"
    echo "Fix the failing tests before committing"
    exit 1
fi

# Check for TODO/FIXME/HACK comments in staged files
echo "üìã Checking for TODO/FIXME/HACK comments..."
todo_count=0
for file in $staged_go_files; do
    if [ -f "$file" ]; then
        todos=$(grep -n -i "TODO\|FIXME\|HACK" "$file" || true)
        if [ -n "$todos" ]; then
            if [ $todo_count -eq 0 ]; then
                echo "‚ö†Ô∏è  Found TODO/FIXME/HACK comments:"
            fi
            echo "  $file:"
            echo "$todos" | sed 's/^/    /'
            todo_count=$((todo_count + 1))
        fi
    fi
done

if [ $todo_count -gt 0 ]; then
    echo ""
    echo "Consider addressing these comments before committing."
    echo "To proceed anyway, use: git commit --no-verify"
fi

# Check for large files
echo "üìè Checking for large files..."
large_files=""
for file in $(git diff --cached --name-only); do
    if [ -f "$file" ]; then
        size=$(wc -c < "$file")
        if [ $size -gt 1048576 ]; then # 1MB
            large_files="$large_files $file ($(( size / 1024 ))KB)"
        fi
    fi
done

if [ -n "$large_files" ]; then
    echo "‚ö†Ô∏è  Large files detected:"
    echo "$large_files"
    echo "Consider if these files should be committed to the repository."
fi

# Check for sensitive information patterns
echo "üîê Checking for potential secrets..."
secret_patterns="password|secret|key|token|api_key|private_key"
for file in $staged_go_files; do
    if [ -f "$file" ]; then
        secrets=$(grep -i -E "$secret_patterns" "$file" | grep -v "// " || true)
        if [ -n "$secrets" ]; then
            echo "‚ö†Ô∏è  Potential secrets found in $file:"
            echo "$secrets" | sed 's/^/    /'
            echo "Please review these lines to ensure no actual secrets are committed."
        fi
    fi
done

echo "‚úÖ All pre-commit checks passed!"
echo ""
echo "üìä Summary:"
echo "  - Files checked: $(echo "$staged_go_files" | wc -w)"
echo "  - Formatting: ‚úÖ"
echo "  - Linting: ‚úÖ"
echo "  - Tests: ‚úÖ"
echo ""

exit 0